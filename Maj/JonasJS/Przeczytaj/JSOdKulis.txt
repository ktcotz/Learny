Temat: JSOdKulis

W tym pliku opiszę JS od warstwy działania i tego jak się JS zachowuje.

1. Overview of Javascript

* High-level - jest wysokopoziomowym językiem który dba o wszystko zza kulis, nie musimy się martwić o zarządzanie pamięcia.

* Garbage-collected - algorytm wewnątrz JS który usuwa niepotrzebne obiekty, nieużywane.

* JIT compiled - JS nie jest ani kompilowany ani interpretowany, jest kombinacja dwojga, jest kompilowany i interpretowany w tym samym czasie.
Odsyłam po więcej informacji na wikipedię.

* Multi-paradigm - Możemy używać różnych paradygmatów programowania, funkcyjnego, obiektowego, proceduralnego..

* Prototype based oriented - JS bazuje na prototypach obiektów, wszystko jest na tym zbudowane.

* First-class functions - Klasy pierwszego rzędu, możemy używać funkcji jako zmiennych, możemy je dawać innym funkcją i je zwracać z funkcji.

* Dynamic - dynamiczny, nie dbamy o typ danych, (DLATEGO KORZYSTAMY Z TYPESCRIPT!)

* Single-threaded - Jedno wątkowy, dlatego nie jest dobry do trudnych procesów wymagających wielu wątków, przeprocesowywania zdjęć..

* Non-blocking event loop - Pętla zdarzeń która rozwiązuje problem single threaded. Wszystkie zdarzenia asynchroniczne są przez nią obsługiwane.
Jeżeli chcesz wiedzieć jak działa odsyłam na YouTube.

2. Execution Context & Call Stack

Wstępnie cały kod jest skanowany i kod najwyższego rzędu (globalny) jest zapisywany w globalnym kontekście. Każde wywołanie funkcji tworzy swój własny kontekst, pamiętaj istnieje tylko jeden globalny!

Call stack - miejsce w którym wykonywany jest kod, est to stos na który wrzuca się wykonywany kod.


3. Scope Chain

Scope oznacza w jaki sposób zmienne w naszym programie są dostępne w różnych miejscach kodu. Gdzie "żyją"..
Nie zawsze mamy możliwość używania zmiennych w miejscach gdzie nie mają one zasięgu.

Mamy zakresy blokowe,globalne, funkcyjne..

Zakresy są tworzone w momencie tworzenia kodu, nie w momencie wywoływania jakieś zmiennej.

Scope odnosi się do ruchu z dołu do góry, jeżeli w danym scopie nie ma zmiennej sięga do kolejnego wyższego zakresu. Nie bierze pod uwagę zakresów pobocznych.

4. Hoisting

Hoisting to mechanizm wynoszenia funkcji,zmiennych na sam początek działania kodu. Nie wszystkie rodzaje zmiennych oraz funkcji są hoistowane.

5. TDZ - Temporal dead zone

Miejsce w którym zmienna nie jest dostępna.

6. This

This w JS uwzględnia działanie podczas wywołania nie tworzenia kodu, jest to zmienna właściwość zależna od wywołania kontekstu.

Jeżeli używasz podczas funkcji albo w scope globalnym, wskaże undefined/Window.

Jeżeli używasz w obiekcie wskaże na aktualny obiekt wywołania.

Jeżeli używasz na DOM elemencie, wskaże na aktualny DOM element.

Jeżeli używasz w arrow function, wskaże na leksykalne this, poziomu wyżej.

7. Referencja

Typy proste w momencie kopiowania, kopiują wartość.
Typy złożone w momencie kopiowania, kopiują referencję.

W momencie zmiany skopiowanego elementu złożonego, zmiana nastąpi w miejscu referencji więc każda zmienna odwołująca się do obiektu będzie widzieć zmianę.